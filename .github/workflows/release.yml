name: Release

on:
  push:
    branches: [ main ]
    paths:
      - 'TapPrint-*/package.json'
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Workspace to release'
        required: true
        type: choice
        options:
          - TapPrint-admin
          - TapPrint-backend
          - TapPrint-cockpit
          - all
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io

jobs:
  # Detect which workspaces have version changes
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      admin: ${{ steps.changes.outputs.admin }}
      backend: ${{ steps.changes.outputs.backend }}
      cockpit: ${{ steps.changes.outputs.cockpit }}
      any: ${{ steps.changes.outputs.admin == 'true' || steps.changes.outputs.backend == 'true' || steps.changes.outputs.cockpit == 'true' }}
      matrix: ${{ steps.matrix.outputs.workspaces }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect version changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            admin:
              - 'TapPrint-admin/package.json'
            backend:
              - 'TapPrint-backend/package.json'
            cockpit:
              - 'TapPrint-cockpit/package.json'

      - name: Build matrix for changed workspaces
        id: matrix
        run: |
          workspaces="[]"

          if [ "${{ steps.changes.outputs.admin }}" == "true" ] || [ "${{ github.event.inputs.workspace }}" == "TapPrint-admin" ] || [ "${{ github.event.inputs.workspace }}" == "all" ]; then
            workspaces=$(echo $workspaces | jq '. += [{"name": "admin", "path": "TapPrint-admin", "image": "tapprint-admin", "port": "3050"}]')
          fi

          if [ "${{ steps.changes.outputs.backend }}" == "true" ] || [ "${{ github.event.inputs.workspace }}" == "TapPrint-backend" ] || [ "${{ github.event.inputs.workspace }}" == "all" ]; then
            workspaces=$(echo $workspaces | jq '. += [{"name": "backend", "path": "TapPrint-backend", "image": "tapprint-backend", "port": "3001"}]')
          fi

          if [ "${{ steps.changes.outputs.cockpit }}" == "true" ] || [ "${{ github.event.inputs.workspace }}" == "TapPrint-cockpit" ] || [ "${{ github.event.inputs.workspace }}" == "all" ]; then
            workspaces=$(echo $workspaces | jq '. += [{"name": "cockpit", "path": "TapPrint-cockpit", "image": "tapprint-cockpit", "port": "3060"}]')
          fi

          echo "workspaces=$workspaces" >> $GITHUB_OUTPUT

  # Build and test before release
  pre-release:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any == 'true'
    strategy:
      fail-fast: true
      matrix:
        workspace: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ matrix.workspace.path }}/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Run tests for ${{ matrix.workspace.name }}
        run: npm run test --workspace=${{ matrix.workspace.path }}

      - name: Build ${{ matrix.workspace.name }}
        run: npm run build --workspace=${{ matrix.workspace.path }}

      - name: Cache build artifacts
        uses: actions/cache/save@v4
        with:
          path: ${{ matrix.workspace.path }}/dist
          key: release-build-${{ matrix.workspace.name }}-${{ github.sha }}

  # Create GitHub releases
  create-release:
    runs-on: ubuntu-latest
    needs: [detect-changes, pre-release]
    if: needs.detect-changes.outputs.any == 'true'
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    outputs:
      admin-version: ${{ steps.version.outputs.admin }}
      backend-version: ${{ steps.version.outputs.backend }}
      cockpit-version: ${{ steps.version.outputs.cockpit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get version
        id: version
        run: |
          version=$(node -p "require('./${{ matrix.workspace.path }}/package.json').version")
          echo "${{ matrix.workspace.name }}=$version" >> $GITHUB_OUTPUT
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: ${{ matrix.workspace.path }}/dist
          key: release-build-${{ matrix.workspace.name }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Create release archive
        run: |
          cd ${{ matrix.workspace.path }}
          tar -czf ../${{ matrix.workspace.name }}-${{ env.VERSION }}.tar.gz dist/

      - name: Generate changelog
        id: changelog
        run: |
          echo "## What's Changed in ${{ matrix.workspace.name }} v${{ env.VERSION }}" > changelog.md
          echo "" >> changelog.md

          # Get commits since last release for this workspace
          git log --pretty=format:"- %s (%h)" --no-merges HEAD~10..HEAD -- ${{ matrix.workspace.path }}/ >> changelog.md || echo "- Initial release" >> changelog.md

          echo "" >> changelog.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ env.VERSION }}...HEAD" >> changelog.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ matrix.workspace.name }}-v${{ env.VERSION }}
          name: ${{ matrix.workspace.name }} v${{ env.VERSION }}
          body_path: changelog.md
          files: ${{ matrix.workspace.name }}-${{ env.VERSION }}.tar.gz
          draft: false
          prerelease: ${{ contains(env.VERSION, 'pre-release') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and push Docker images for releases
  docker-release:
    runs-on: ubuntu-latest
    needs: [detect-changes, create-release]
    if: needs.detect-changes.outputs.any == 'true'
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        run: |
          version=$(node -p "require('./${{ matrix.workspace.path }}/package.json').version")
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: ${{ matrix.workspace.path }}/dist
          key: release-build-${{ matrix.workspace.name }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.workspace.image }}
          tags: |
            type=raw,value=v${{ env.VERSION }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.workspace.path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,scope=${{ matrix.workspace.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.workspace.name }}

  # Notify about releases
  notify:
    runs-on: ubuntu-latest
    needs: [detect-changes, create-release, docker-release]
    if: needs.detect-changes.outputs.any == 'true'
    steps:
      - name: Create release summary
        run: |
          echo "## ðŸš€ New Releases Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.admin }}" == "true" ]; then
            echo "- **TapPrint Admin**: v${{ needs.create-release.outputs.admin-version }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.detect-changes.outputs.backend }}" == "true" ]; then
            echo "- **TapPrint Backend**: v${{ needs.create-release.outputs.backend-version }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.detect-changes.outputs.cockpit }}" == "true" ]; then
            echo "- **TapPrint Cockpit**: v${{ needs.create-release.outputs.cockpit-version }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All Docker images have been published to GitHub Container Registry." >> $GITHUB_STEP_SUMMARY